{"ast":null,"code":"\"use strict\";\n\n/* tslint:disable */\n/* eslint-disable */\n/**\n * OpenAI API\n * APIs for sampling from and fine-tuning language models\n *\n * The version of the OpenAPI document: 1.1.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar _classCallCheck = require(\"C:/Users/mrodri/Desktop/dalle-master/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\nvar _createClass = require(\"C:/Users/mrodri/Desktop/dalle-master/node_modules/@babel/runtime/helpers/createClass.js\").default;\nvar _inherits = require(\"C:/Users/mrodri/Desktop/dalle-master/node_modules/@babel/runtime/helpers/inherits.js\").default;\nvar _createSuper = require(\"C:/Users/mrodri/Desktop/dalle-master/node_modules/@babel/runtime/helpers/createSuper.js\").default;\nvar _regeneratorRuntime = require(\"C:/Users/mrodri/Desktop/dalle-master/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OpenAIApi = exports.OpenAIApiFactory = exports.OpenAIApiFp = exports.OpenAIApiAxiosParamCreator = exports.CreateImageRequestResponseFormatEnum = exports.CreateImageRequestSizeEnum = void 0;\nvar axios_1 = require(\"axios\");\n// Some imports not used depending on template conditions\n// @ts-ignore\nvar common_1 = require(\"./common\");\n// @ts-ignore\nvar base_1 = require(\"./base\");\nexports.CreateImageRequestSizeEnum = {\n  _256x256: '256x256',\n  _512x512: '512x512',\n  _1024x1024: '1024x1024'\n};\nexports.CreateImageRequestResponseFormatEnum = {\n  Url: 'url',\n  B64Json: 'b64_json'\n};\n/**\n * OpenAIApi - axios parameter creator\n * @export\n */\nexports.OpenAIApiAxiosParamCreator = function (configuration) {\n  var _this = this;\n  return {\n    /**\n     *\n     * @summary Immediately cancel a fine-tune job.\n     * @param {string} fineTuneId The ID of the fine-tune job to cancel\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cancelFineTune: function cancelFineTune(fineTuneId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              // verify required parameter 'fineTuneId' is not null or undefined\n              common_1.assertParamExists('cancelFineTune', 'fineTuneId', fineTuneId);\n              localVarPath = \"/fine-tunes/{fine_tune_id}/cancel\".replace(\"{\".concat(\"fine_tune_id\", \"}\"), encodeURIComponent(String(fineTuneId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.\n              localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n              localVarRequestOptions = Object.assign(Object.assign({\n                method: 'POST'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context.abrupt(\"return\", {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n    },\n    /**\n     *\n     * @summary Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).\n     * @param {CreateAnswerRequest} createAnswerRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    createAnswer: function createAnswer(createAnswerRequest) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              // verify required parameter 'createAnswerRequest' is not null or undefined\n              common_1.assertParamExists('createAnswer', 'createAnswerRequest', createAnswerRequest);\n              localVarPath = \"/answers\"; // use dummy base URL string because the URL constructor only accepts absolute URLs.\n              localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n              localVarRequestOptions = Object.assign(Object.assign({\n                method: 'POST'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              localVarHeaderParameter['Content-Type'] = 'application/json';\n              common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              localVarRequestOptions.data = common_1.serializeDataIfNeeded(createAnswerRequest, localVarRequestOptions, configuration);\n              return _context2.abrupt(\"return\", {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n    },\n    /**\n     *\n     * @summary Classifies the specified `query` using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases.\n     * @param {CreateClassificationRequest} createClassificationRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    createClassification: function createClassification(createClassificationRequest) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              // verify required parameter 'createClassificationRequest' is not null or undefined\n              common_1.assertParamExists('createClassification', 'createClassificationRequest', createClassificationRequest);\n              localVarPath = \"/classifications\"; // use dummy base URL string because the URL constructor only accepts absolute URLs.\n              localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n              localVarRequestOptions = Object.assign(Object.assign({\n                method: 'POST'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              localVarHeaderParameter['Content-Type'] = 'application/json';\n              common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              localVarRequestOptions.data = common_1.serializeDataIfNeeded(createClassificationRequest, localVarRequestOptions, configuration);\n              return _context3.abrupt(\"return\", {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n    },\n    /**\n     *\n     * @summary Creates a completion for the provided prompt and parameters\n     * @param {CreateCompletionRequest} createCompletionRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createCompletion: function createCompletion(createCompletionRequest) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              // verify required parameter 'createCompletionRequest' is not null or undefined\n              common_1.assertParamExists('createCompletion', 'createCompletionRequest', createCompletionRequest);\n              localVarPath = \"/completions\"; // use dummy base URL string because the URL constructor only accepts absolute URLs.\n              localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n              localVarRequestOptions = Object.assign(Object.assign({\n                method: 'POST'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              localVarHeaderParameter['Content-Type'] = 'application/json';\n              common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              localVarRequestOptions.data = common_1.serializeDataIfNeeded(createCompletionRequest, localVarRequestOptions, configuration);\n              return _context4.abrupt(\"return\", {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n            case 13:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4);\n      }));\n    },\n    /**\n     *\n     * @summary Creates a new edit for the provided input, instruction, and parameters\n     * @param {CreateEditRequest} createEditRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createEdit: function createEdit(createEditRequest) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              // verify required parameter 'createEditRequest' is not null or undefined\n              common_1.assertParamExists('createEdit', 'createEditRequest', createEditRequest);\n              localVarPath = \"/edits\"; // use dummy base URL string because the URL constructor only accepts absolute URLs.\n              localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n              localVarRequestOptions = Object.assign(Object.assign({\n                method: 'POST'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              localVarHeaderParameter['Content-Type'] = 'application/json';\n              common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              localVarRequestOptions.data = common_1.serializeDataIfNeeded(createEditRequest, localVarRequestOptions, configuration);\n              return _context5.abrupt(\"return\", {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n            case 13:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5);\n      }));\n    },\n    /**\n     *\n     * @summary Creates an embedding vector representing the input text.\n     * @param {CreateEmbeddingRequest} createEmbeddingRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createEmbedding: function createEmbedding(createEmbeddingRequest) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              // verify required parameter 'createEmbeddingRequest' is not null or undefined\n              common_1.assertParamExists('createEmbedding', 'createEmbeddingRequest', createEmbeddingRequest);\n              localVarPath = \"/embeddings\"; // use dummy base URL string because the URL constructor only accepts absolute URLs.\n              localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n              localVarRequestOptions = Object.assign(Object.assign({\n                method: 'POST'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              localVarHeaderParameter['Content-Type'] = 'application/json';\n              common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              localVarRequestOptions.data = common_1.serializeDataIfNeeded(createEmbeddingRequest, localVarRequestOptions, configuration);\n              return _context6.abrupt(\"return\", {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n            case 13:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6);\n      }));\n    },\n    /**\n     *\n     * @summary Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.\n     * @param {File} file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\\\\&quot;fine-tune\\\\\\&quot;, each line is a JSON record with \\\\\\&quot;prompt\\\\\\&quot; and \\\\\\&quot;completion\\\\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).\n     * @param {string} purpose The intended purpose of the uploaded documents.  Use \\\\\\&quot;fine-tune\\\\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createFile: function createFile(file, purpose) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              // verify required parameter 'file' is not null or undefined\n              common_1.assertParamExists('createFile', 'file', file);\n              // verify required parameter 'purpose' is not null or undefined\n              common_1.assertParamExists('createFile', 'purpose', purpose);\n              localVarPath = \"/files\"; // use dummy base URL string because the URL constructor only accepts absolute URLs.\n              localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n              localVarRequestOptions = Object.assign(Object.assign({\n                method: 'POST'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              localVarFormParams = new (configuration && configuration.formDataCtor || FormData)();\n              if (file !== undefined) {\n                localVarFormParams.append('file', file);\n              }\n              if (purpose !== undefined) {\n                localVarFormParams.append('purpose', purpose);\n              }\n              localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\n              common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), localVarFormParams.getHeaders()), headersFromBaseOptions), options.headers);\n              localVarRequestOptions.data = localVarFormParams;\n              return _context7.abrupt(\"return\", {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n            case 17:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7);\n      }));\n    },\n    /**\n     *\n     * @summary Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n     * @param {CreateFineTuneRequest} createFineTuneRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createFineTune: function createFineTune(createFineTuneRequest) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              // verify required parameter 'createFineTuneRequest' is not null or undefined\n              common_1.assertParamExists('createFineTune', 'createFineTuneRequest', createFineTuneRequest);\n              localVarPath = \"/fine-tunes\"; // use dummy base URL string because the URL constructor only accepts absolute URLs.\n              localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n              localVarRequestOptions = Object.assign(Object.assign({\n                method: 'POST'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              localVarHeaderParameter['Content-Type'] = 'application/json';\n              common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              localVarRequestOptions.data = common_1.serializeDataIfNeeded(createFineTuneRequest, localVarRequestOptions, configuration);\n              return _context8.abrupt(\"return\", {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n            case 13:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8);\n      }));\n    },\n    /**\n     *\n     * @summary Creates an image given a prompt.\n     * @param {CreateImageRequest} createImageRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createImage: function createImage(createImageRequest) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              // verify required parameter 'createImageRequest' is not null or undefined\n              common_1.assertParamExists('createImage', 'createImageRequest', createImageRequest);\n              localVarPath = \"/images/generations\"; // use dummy base URL string because the URL constructor only accepts absolute URLs.\n              localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n              localVarRequestOptions = Object.assign(Object.assign({\n                method: 'POST'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              localVarHeaderParameter['Content-Type'] = 'application/json';\n              common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              localVarRequestOptions.data = common_1.serializeDataIfNeeded(createImageRequest, localVarRequestOptions, configuration);\n              return _context9.abrupt(\"return\", {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n            case 13:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9);\n      }));\n    },\n    /**\n     *\n     * @summary Creates an edited or extended image given an original image and a prompt.\n     * @param {File} image The image to edit. Must be a valid PNG file, less than 4MB, and square.\n     * @param {File} mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.\n     * @param {string} prompt A text description of the desired image(s). The maximum length is 1000 characters.\n     * @param {number} [n] The number of images to generate. Must be between 1 and 10.\n     * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.\n     * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.\n     * @param {string} [user] A unique identifier representing your end-user, which will help OpenAI to monitor and detect abuse. [Learn more](/docs/usage-policies/end-user-ids).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createImageEdit: function createImageEdit(image, mask, prompt, n, size, responseFormat, user) {\n      var options = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : {};\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              // verify required parameter 'image' is not null or undefined\n              common_1.assertParamExists('createImageEdit', 'image', image);\n              // verify required parameter 'mask' is not null or undefined\n              common_1.assertParamExists('createImageEdit', 'mask', mask);\n              // verify required parameter 'prompt' is not null or undefined\n              common_1.assertParamExists('createImageEdit', 'prompt', prompt);\n              localVarPath = \"/images/edits\"; // use dummy base URL string because the URL constructor only accepts absolute URLs.\n              localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n              localVarRequestOptions = Object.assign(Object.assign({\n                method: 'POST'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              localVarFormParams = new (configuration && configuration.formDataCtor || FormData)();\n              if (image !== undefined) {\n                localVarFormParams.append('image', image);\n              }\n              if (mask !== undefined) {\n                localVarFormParams.append('mask', mask);\n              }\n              if (prompt !== undefined) {\n                localVarFormParams.append('prompt', prompt);\n              }\n              if (n !== undefined) {\n                localVarFormParams.append('n', n);\n              }\n              if (size !== undefined) {\n                localVarFormParams.append('size', size);\n              }\n              if (responseFormat !== undefined) {\n                localVarFormParams.append('response_format', responseFormat);\n              }\n              if (user !== undefined) {\n                localVarFormParams.append('user', user);\n              }\n              localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\n              common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), localVarFormParams.getHeaders()), headersFromBaseOptions), options.headers);\n              localVarRequestOptions.data = localVarFormParams;\n              return _context10.abrupt(\"return\", {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n            case 23:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10);\n      }));\n    },\n    /**\n     *\n     * @summary Creates a variation of a given image.\n     * @param {File} image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.\n     * @param {number} [n] The number of images to generate. Must be between 1 and 10.\n     * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.\n     * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.\n     * @param {string} [user] A unique identifier representing your end-user, which will help OpenAI to monitor and detect abuse. [Learn more](/docs/usage-policies/end-user-ids).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createImageVariation: function createImageVariation(image, n, size, responseFormat, user) {\n      var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              // verify required parameter 'image' is not null or undefined\n              common_1.assertParamExists('createImageVariation', 'image', image);\n              localVarPath = \"/images/variations\"; // use dummy base URL string because the URL constructor only accepts absolute URLs.\n              localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n              localVarRequestOptions = Object.assign(Object.assign({\n                method: 'POST'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              localVarFormParams = new (configuration && configuration.formDataCtor || FormData)();\n              if (image !== undefined) {\n                localVarFormParams.append('image', image);\n              }\n              if (n !== undefined) {\n                localVarFormParams.append('n', n);\n              }\n              if (size !== undefined) {\n                localVarFormParams.append('size', size);\n              }\n              if (responseFormat !== undefined) {\n                localVarFormParams.append('response_format', responseFormat);\n              }\n              if (user !== undefined) {\n                localVarFormParams.append('user', user);\n              }\n              localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\n              common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), localVarFormParams.getHeaders()), headersFromBaseOptions), options.headers);\n              localVarRequestOptions.data = localVarFormParams;\n              return _context11.abrupt(\"return\", {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n            case 19:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11);\n      }));\n    },\n    /**\n     *\n     * @summary Classifies if text violates OpenAI\\'s Content Policy\n     * @param {CreateModerationRequest} createModerationRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createModeration: function createModeration(createModerationRequest) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              // verify required parameter 'createModerationRequest' is not null or undefined\n              common_1.assertParamExists('createModeration', 'createModerationRequest', createModerationRequest);\n              localVarPath = \"/moderations\"; // use dummy base URL string because the URL constructor only accepts absolute URLs.\n              localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n              localVarRequestOptions = Object.assign(Object.assign({\n                method: 'POST'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              localVarHeaderParameter['Content-Type'] = 'application/json';\n              common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              localVarRequestOptions.data = common_1.serializeDataIfNeeded(createModerationRequest, localVarRequestOptions, configuration);\n              return _context12.abrupt(\"return\", {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n            case 13:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12);\n      }));\n    },\n    /**\n     *\n     * @summary The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.\n     * @param {string} engineId The ID of the engine to use for this request.  You can select one of &#x60;ada&#x60;, &#x60;babbage&#x60;, &#x60;curie&#x60;, or &#x60;davinci&#x60;.\n     * @param {CreateSearchRequest} createSearchRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    createSearch: function createSearch(engineId, createSearchRequest) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              // verify required parameter 'engineId' is not null or undefined\n              common_1.assertParamExists('createSearch', 'engineId', engineId);\n              // verify required parameter 'createSearchRequest' is not null or undefined\n              common_1.assertParamExists('createSearch', 'createSearchRequest', createSearchRequest);\n              localVarPath = \"/engines/{engine_id}/search\".replace(\"{\".concat(\"engine_id\", \"}\"), encodeURIComponent(String(engineId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.\n              localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n              localVarRequestOptions = Object.assign(Object.assign({\n                method: 'POST'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              localVarHeaderParameter['Content-Type'] = 'application/json';\n              common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              localVarRequestOptions.data = common_1.serializeDataIfNeeded(createSearchRequest, localVarRequestOptions, configuration);\n              return _context13.abrupt(\"return\", {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n            case 14:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee13);\n      }));\n    },\n    /**\n     *\n     * @summary Delete a file.\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteFile: function deleteFile(fileId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              // verify required parameter 'fileId' is not null or undefined\n              common_1.assertParamExists('deleteFile', 'fileId', fileId);\n              localVarPath = \"/files/{file_id}\".replace(\"{\".concat(\"file_id\", \"}\"), encodeURIComponent(String(fileId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.\n              localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n              localVarRequestOptions = Object.assign(Object.assign({\n                method: 'DELETE'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context14.abrupt(\"return\", {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n            case 11:\n            case \"end\":\n              return _context14.stop();\n          }\n        }, _callee14);\n      }));\n    },\n    /**\n     *\n     * @summary Delete a fine-tuned model. You must have the Owner role in your organization.\n     * @param {string} model The model to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteModel: function deleteModel(model) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) switch (_context15.prev = _context15.next) {\n            case 0:\n              // verify required parameter 'model' is not null or undefined\n              common_1.assertParamExists('deleteModel', 'model', model);\n              localVarPath = \"/models/{model}\".replace(\"{\".concat(\"model\", \"}\"), encodeURIComponent(String(model))); // use dummy base URL string because the URL constructor only accepts absolute URLs.\n              localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n              localVarRequestOptions = Object.assign(Object.assign({\n                method: 'DELETE'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context15.abrupt(\"return\", {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n            case 11:\n            case \"end\":\n              return _context15.stop();\n          }\n        }, _callee15);\n      }));\n    },\n    /**\n     *\n     * @summary Returns the contents of the specified file\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    downloadFile: function downloadFile(fileId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) switch (_context16.prev = _context16.next) {\n            case 0:\n              // verify required parameter 'fileId' is not null or undefined\n              common_1.assertParamExists('downloadFile', 'fileId', fileId);\n              localVarPath = \"/files/{file_id}/content\".replace(\"{\".concat(\"file_id\", \"}\"), encodeURIComponent(String(fileId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.\n              localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n              localVarRequestOptions = Object.assign(Object.assign({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context16.abrupt(\"return\", {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n            case 11:\n            case \"end\":\n              return _context16.stop();\n          }\n        }, _callee16);\n      }));\n    },\n    /**\n     *\n     * @summary Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    listEngines: function listEngines() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {\n        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) switch (_context17.prev = _context17.next) {\n            case 0:\n              localVarPath = \"/engines\"; // use dummy base URL string because the URL constructor only accepts absolute URLs.\n              localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n              localVarRequestOptions = Object.assign(Object.assign({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context17.abrupt(\"return\", {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n            case 10:\n            case \"end\":\n              return _context17.stop();\n          }\n        }, _callee17);\n      }));\n    },\n    /**\n     *\n     * @summary Returns a list of files that belong to the user\\'s organization.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listFiles: function listFiles() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {\n        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) switch (_context18.prev = _context18.next) {\n            case 0:\n              localVarPath = \"/files\"; // use dummy base URL string because the URL constructor only accepts absolute URLs.\n              localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n              localVarRequestOptions = Object.assign(Object.assign({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context18.abrupt(\"return\", {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n            case 10:\n            case \"end\":\n              return _context18.stop();\n          }\n        }, _callee18);\n      }));\n    },\n    /**\n     *\n     * @summary Get fine-grained status updates for a fine-tune job.\n     * @param {string} fineTuneId The ID of the fine-tune job to get events for.\n     * @param {boolean} [stream] Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listFineTuneEvents: function listFineTuneEvents(fineTuneId, stream) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {\n        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) switch (_context19.prev = _context19.next) {\n            case 0:\n              // verify required parameter 'fineTuneId' is not null or undefined\n              common_1.assertParamExists('listFineTuneEvents', 'fineTuneId', fineTuneId);\n              localVarPath = \"/fine-tunes/{fine_tune_id}/events\".replace(\"{\".concat(\"fine_tune_id\", \"}\"), encodeURIComponent(String(fineTuneId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.\n              localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n              localVarRequestOptions = Object.assign(Object.assign({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              if (stream !== undefined) {\n                localVarQueryParameter['stream'] = stream;\n              }\n              common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context19.abrupt(\"return\", {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n            case 12:\n            case \"end\":\n              return _context19.stop();\n          }\n        }, _callee19);\n      }));\n    },\n    /**\n     *\n     * @summary List your organization\\'s fine-tuning jobs\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listFineTunes: function listFineTunes() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {\n        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) switch (_context20.prev = _context20.next) {\n            case 0:\n              localVarPath = \"/fine-tunes\"; // use dummy base URL string because the URL constructor only accepts absolute URLs.\n              localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n              localVarRequestOptions = Object.assign(Object.assign({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context20.abrupt(\"return\", {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n            case 10:\n            case \"end\":\n              return _context20.stop();\n          }\n        }, _callee20);\n      }));\n    },\n    /**\n     *\n     * @summary Lists the currently available models, and provides basic information about each one such as the owner and availability.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listModels: function listModels() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {\n        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) switch (_context21.prev = _context21.next) {\n            case 0:\n              localVarPath = \"/models\"; // use dummy base URL string because the URL constructor only accepts absolute URLs.\n              localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n              localVarRequestOptions = Object.assign(Object.assign({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context21.abrupt(\"return\", {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n            case 10:\n            case \"end\":\n              return _context21.stop();\n          }\n        }, _callee21);\n      }));\n    },\n    /**\n     *\n     * @summary Retrieves a model instance, providing basic information about it such as the owner and availability.\n     * @param {string} engineId The ID of the engine to use for this request\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    retrieveEngine: function retrieveEngine(engineId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {\n        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n        return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n          while (1) switch (_context22.prev = _context22.next) {\n            case 0:\n              // verify required parameter 'engineId' is not null or undefined\n              common_1.assertParamExists('retrieveEngine', 'engineId', engineId);\n              localVarPath = \"/engines/{engine_id}\".replace(\"{\".concat(\"engine_id\", \"}\"), encodeURIComponent(String(engineId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.\n              localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n              localVarRequestOptions = Object.assign(Object.assign({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context22.abrupt(\"return\", {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n            case 11:\n            case \"end\":\n              return _context22.stop();\n          }\n        }, _callee22);\n      }));\n    },\n    /**\n     *\n     * @summary Returns information about a specific file.\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    retrieveFile: function retrieveFile(fileId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {\n        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n        return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n          while (1) switch (_context23.prev = _context23.next) {\n            case 0:\n              // verify required parameter 'fileId' is not null or undefined\n              common_1.assertParamExists('retrieveFile', 'fileId', fileId);\n              localVarPath = \"/files/{file_id}\".replace(\"{\".concat(\"file_id\", \"}\"), encodeURIComponent(String(fileId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.\n              localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n              localVarRequestOptions = Object.assign(Object.assign({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context23.abrupt(\"return\", {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n            case 11:\n            case \"end\":\n              return _context23.stop();\n          }\n        }, _callee23);\n      }));\n    },\n    /**\n     *\n     * @summary Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n     * @param {string} fineTuneId The ID of the fine-tune job\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    retrieveFineTune: function retrieveFineTune(fineTuneId) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {\n        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n        return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n          while (1) switch (_context24.prev = _context24.next) {\n            case 0:\n              // verify required parameter 'fineTuneId' is not null or undefined\n              common_1.assertParamExists('retrieveFineTune', 'fineTuneId', fineTuneId);\n              localVarPath = \"/fine-tunes/{fine_tune_id}\".replace(\"{\".concat(\"fine_tune_id\", \"}\"), encodeURIComponent(String(fineTuneId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.\n              localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n              localVarRequestOptions = Object.assign(Object.assign({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context24.abrupt(\"return\", {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n            case 11:\n            case \"end\":\n              return _context24.stop();\n          }\n        }, _callee24);\n      }));\n    },\n    /**\n     *\n     * @summary Retrieves a model instance, providing basic information about the model such as the owner and permissioning.\n     * @param {string} model The ID of the model to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    retrieveModel: function retrieveModel(model) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee25() {\n        var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n        return _regeneratorRuntime().wrap(function _callee25$(_context25) {\n          while (1) switch (_context25.prev = _context25.next) {\n            case 0:\n              // verify required parameter 'model' is not null or undefined\n              common_1.assertParamExists('retrieveModel', 'model', model);\n              localVarPath = \"/models/{model}\".replace(\"{\".concat(\"model\", \"}\"), encodeURIComponent(String(model))); // use dummy base URL string because the URL constructor only accepts absolute URLs.\n              localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n              if (configuration) {\n                baseOptions = configuration.baseOptions;\n              }\n              localVarRequestOptions = Object.assign(Object.assign({\n                method: 'GET'\n              }, baseOptions), options);\n              localVarHeaderParameter = {};\n              localVarQueryParameter = {};\n              common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n              headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n              localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n              return _context25.abrupt(\"return\", {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions\n              });\n            case 11:\n            case \"end\":\n              return _context25.stop();\n          }\n        }, _callee25);\n      }));\n    }\n  };\n};\n/**\n * OpenAIApi - functional programming interface\n * @export\n */\nexports.OpenAIApiFp = function (configuration) {\n  var localVarAxiosParamCreator = exports.OpenAIApiAxiosParamCreator(configuration);\n  return {\n    /**\n     *\n     * @summary Immediately cancel a fine-tune job.\n     * @param {string} fineTuneId The ID of the fine-tune job to cancel\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cancelFineTune: function cancelFineTune(fineTuneId, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee26() {\n        var localVarAxiosArgs;\n        return _regeneratorRuntime().wrap(function _callee26$(_context26) {\n          while (1) switch (_context26.prev = _context26.next) {\n            case 0:\n              _context26.next = 2;\n              return localVarAxiosParamCreator.cancelFineTune(fineTuneId, options);\n            case 2:\n              localVarAxiosArgs = _context26.sent;\n              return _context26.abrupt(\"return\", common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration));\n            case 4:\n            case \"end\":\n              return _context26.stop();\n          }\n        }, _callee26);\n      }));\n    },\n    /**\n     *\n     * @summary Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).\n     * @param {CreateAnswerRequest} createAnswerRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    createAnswer: function createAnswer(createAnswerRequest, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee27() {\n        var localVarAxiosArgs;\n        return _regeneratorRuntime().wrap(function _callee27$(_context27) {\n          while (1) switch (_context27.prev = _context27.next) {\n            case 0:\n              _context27.next = 2;\n              return localVarAxiosParamCreator.createAnswer(createAnswerRequest, options);\n            case 2:\n              localVarAxiosArgs = _context27.sent;\n              return _context27.abrupt(\"return\", common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration));\n            case 4:\n            case \"end\":\n              return _context27.stop();\n          }\n        }, _callee27);\n      }));\n    },\n    /**\n     *\n     * @summary Classifies the specified `query` using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases.\n     * @param {CreateClassificationRequest} createClassificationRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    createClassification: function createClassification(createClassificationRequest, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee28() {\n        var localVarAxiosArgs;\n        return _regeneratorRuntime().wrap(function _callee28$(_context28) {\n          while (1) switch (_context28.prev = _context28.next) {\n            case 0:\n              _context28.next = 2;\n              return localVarAxiosParamCreator.createClassification(createClassificationRequest, options);\n            case 2:\n              localVarAxiosArgs = _context28.sent;\n              return _context28.abrupt(\"return\", common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration));\n            case 4:\n            case \"end\":\n              return _context28.stop();\n          }\n        }, _callee28);\n      }));\n    },\n    /**\n     *\n     * @summary Creates a completion for the provided prompt and parameters\n     * @param {CreateCompletionRequest} createCompletionRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createCompletion: function createCompletion(createCompletionRequest, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee29() {\n        var localVarAxiosArgs;\n        return _regeneratorRuntime().wrap(function _callee29$(_context29) {\n          while (1) switch (_context29.prev = _context29.next) {\n            case 0:\n              _context29.next = 2;\n              return localVarAxiosParamCreator.createCompletion(createCompletionRequest, options);\n            case 2:\n              localVarAxiosArgs = _context29.sent;\n              return _context29.abrupt(\"return\", common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration));\n            case 4:\n            case \"end\":\n              return _context29.stop();\n          }\n        }, _callee29);\n      }));\n    },\n    /**\n     *\n     * @summary Creates a new edit for the provided input, instruction, and parameters\n     * @param {CreateEditRequest} createEditRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createEdit: function createEdit(createEditRequest, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee30() {\n        var localVarAxiosArgs;\n        return _regeneratorRuntime().wrap(function _callee30$(_context30) {\n          while (1) switch (_context30.prev = _context30.next) {\n            case 0:\n              _context30.next = 2;\n              return localVarAxiosParamCreator.createEdit(createEditRequest, options);\n            case 2:\n              localVarAxiosArgs = _context30.sent;\n              return _context30.abrupt(\"return\", common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration));\n            case 4:\n            case \"end\":\n              return _context30.stop();\n          }\n        }, _callee30);\n      }));\n    },\n    /**\n     *\n     * @summary Creates an embedding vector representing the input text.\n     * @param {CreateEmbeddingRequest} createEmbeddingRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createEmbedding: function createEmbedding(createEmbeddingRequest, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {\n        var localVarAxiosArgs;\n        return _regeneratorRuntime().wrap(function _callee31$(_context31) {\n          while (1) switch (_context31.prev = _context31.next) {\n            case 0:\n              _context31.next = 2;\n              return localVarAxiosParamCreator.createEmbedding(createEmbeddingRequest, options);\n            case 2:\n              localVarAxiosArgs = _context31.sent;\n              return _context31.abrupt(\"return\", common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration));\n            case 4:\n            case \"end\":\n              return _context31.stop();\n          }\n        }, _callee31);\n      }));\n    },\n    /**\n     *\n     * @summary Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.\n     * @param {File} file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\\\\&quot;fine-tune\\\\\\&quot;, each line is a JSON record with \\\\\\&quot;prompt\\\\\\&quot; and \\\\\\&quot;completion\\\\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).\n     * @param {string} purpose The intended purpose of the uploaded documents.  Use \\\\\\&quot;fine-tune\\\\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createFile: function createFile(file, purpose, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee32() {\n        var localVarAxiosArgs;\n        return _regeneratorRuntime().wrap(function _callee32$(_context32) {\n          while (1) switch (_context32.prev = _context32.next) {\n            case 0:\n              _context32.next = 2;\n              return localVarAxiosParamCreator.createFile(file, purpose, options);\n            case 2:\n              localVarAxiosArgs = _context32.sent;\n              return _context32.abrupt(\"return\", common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration));\n            case 4:\n            case \"end\":\n              return _context32.stop();\n          }\n        }, _callee32);\n      }));\n    },\n    /**\n     *\n     * @summary Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n     * @param {CreateFineTuneRequest} createFineTuneRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createFineTune: function createFineTune(createFineTuneRequest, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee33() {\n        var localVarAxiosArgs;\n        return _regeneratorRuntime().wrap(function _callee33$(_context33) {\n          while (1) switch (_context33.prev = _context33.next) {\n            case 0:\n              _context33.next = 2;\n              return localVarAxiosParamCreator.createFineTune(createFineTuneRequest, options);\n            case 2:\n              localVarAxiosArgs = _context33.sent;\n              return _context33.abrupt(\"return\", common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration));\n            case 4:\n            case \"end\":\n              return _context33.stop();\n          }\n        }, _callee33);\n      }));\n    },\n    /**\n     *\n     * @summary Creates an image given a prompt.\n     * @param {CreateImageRequest} createImageRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createImage: function createImage(createImageRequest, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee34() {\n        var localVarAxiosArgs;\n        return _regeneratorRuntime().wrap(function _callee34$(_context34) {\n          while (1) switch (_context34.prev = _context34.next) {\n            case 0:\n              _context34.next = 2;\n              return localVarAxiosParamCreator.createImage(createImageRequest, options);\n            case 2:\n              localVarAxiosArgs = _context34.sent;\n              return _context34.abrupt(\"return\", common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration));\n            case 4:\n            case \"end\":\n              return _context34.stop();\n          }\n        }, _callee34);\n      }));\n    },\n    /**\n     *\n     * @summary Creates an edited or extended image given an original image and a prompt.\n     * @param {File} image The image to edit. Must be a valid PNG file, less than 4MB, and square.\n     * @param {File} mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.\n     * @param {string} prompt A text description of the desired image(s). The maximum length is 1000 characters.\n     * @param {number} [n] The number of images to generate. Must be between 1 and 10.\n     * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.\n     * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.\n     * @param {string} [user] A unique identifier representing your end-user, which will help OpenAI to monitor and detect abuse. [Learn more](/docs/usage-policies/end-user-ids).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createImageEdit: function createImageEdit(image, mask, prompt, n, size, responseFormat, user, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee35() {\n        var localVarAxiosArgs;\n        return _regeneratorRuntime().wrap(function _callee35$(_context35) {\n          while (1) switch (_context35.prev = _context35.next) {\n            case 0:\n              _context35.next = 2;\n              return localVarAxiosParamCreator.createImageEdit(image, mask, prompt, n, size, responseFormat, user, options);\n            case 2:\n              localVarAxiosArgs = _context35.sent;\n              return _context35.abrupt(\"return\", common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration));\n            case 4:\n            case \"end\":\n              return _context35.stop();\n          }\n        }, _callee35);\n      }));\n    },\n    /**\n     *\n     * @summary Creates a variation of a given image.\n     * @param {File} image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.\n     * @param {number} [n] The number of images to generate. Must be between 1 and 10.\n     * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.\n     * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.\n     * @param {string} [user] A unique identifier representing your end-user, which will help OpenAI to monitor and detect abuse. [Learn more](/docs/usage-policies/end-user-ids).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createImageVariation: function createImageVariation(image, n, size, responseFormat, user, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee36() {\n        var localVarAxiosArgs;\n        return _regeneratorRuntime().wrap(function _callee36$(_context36) {\n          while (1) switch (_context36.prev = _context36.next) {\n            case 0:\n              _context36.next = 2;\n              return localVarAxiosParamCreator.createImageVariation(image, n, size, responseFormat, user, options);\n            case 2:\n              localVarAxiosArgs = _context36.sent;\n              return _context36.abrupt(\"return\", common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration));\n            case 4:\n            case \"end\":\n              return _context36.stop();\n          }\n        }, _callee36);\n      }));\n    },\n    /**\n     *\n     * @summary Classifies if text violates OpenAI\\'s Content Policy\n     * @param {CreateModerationRequest} createModerationRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createModeration: function createModeration(createModerationRequest, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee37() {\n        var localVarAxiosArgs;\n        return _regeneratorRuntime().wrap(function _callee37$(_context37) {\n          while (1) switch (_context37.prev = _context37.next) {\n            case 0:\n              _context37.next = 2;\n              return localVarAxiosParamCreator.createModeration(createModerationRequest, options);\n            case 2:\n              localVarAxiosArgs = _context37.sent;\n              return _context37.abrupt(\"return\", common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration));\n            case 4:\n            case \"end\":\n              return _context37.stop();\n          }\n        }, _callee37);\n      }));\n    },\n    /**\n     *\n     * @summary The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.\n     * @param {string} engineId The ID of the engine to use for this request.  You can select one of &#x60;ada&#x60;, &#x60;babbage&#x60;, &#x60;curie&#x60;, or &#x60;davinci&#x60;.\n     * @param {CreateSearchRequest} createSearchRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    createSearch: function createSearch(engineId, createSearchRequest, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee38() {\n        var localVarAxiosArgs;\n        return _regeneratorRuntime().wrap(function _callee38$(_context38) {\n          while (1) switch (_context38.prev = _context38.next) {\n            case 0:\n              _context38.next = 2;\n              return localVarAxiosParamCreator.createSearch(engineId, createSearchRequest, options);\n            case 2:\n              localVarAxiosArgs = _context38.sent;\n              return _context38.abrupt(\"return\", common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration));\n            case 4:\n            case \"end\":\n              return _context38.stop();\n          }\n        }, _callee38);\n      }));\n    },\n    /**\n     *\n     * @summary Delete a file.\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteFile: function deleteFile(fileId, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee39() {\n        var localVarAxiosArgs;\n        return _regeneratorRuntime().wrap(function _callee39$(_context39) {\n          while (1) switch (_context39.prev = _context39.next) {\n            case 0:\n              _context39.next = 2;\n              return localVarAxiosParamCreator.deleteFile(fileId, options);\n            case 2:\n              localVarAxiosArgs = _context39.sent;\n              return _context39.abrupt(\"return\", common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration));\n            case 4:\n            case \"end\":\n              return _context39.stop();\n          }\n        }, _callee39);\n      }));\n    },\n    /**\n     *\n     * @summary Delete a fine-tuned model. You must have the Owner role in your organization.\n     * @param {string} model The model to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteModel: function deleteModel(model, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee40() {\n        var localVarAxiosArgs;\n        return _regeneratorRuntime().wrap(function _callee40$(_context40) {\n          while (1) switch (_context40.prev = _context40.next) {\n            case 0:\n              _context40.next = 2;\n              return localVarAxiosParamCreator.deleteModel(model, options);\n            case 2:\n              localVarAxiosArgs = _context40.sent;\n              return _context40.abrupt(\"return\", common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration));\n            case 4:\n            case \"end\":\n              return _context40.stop();\n          }\n        }, _callee40);\n      }));\n    },\n    /**\n     *\n     * @summary Returns the contents of the specified file\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    downloadFile: function downloadFile(fileId, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee41() {\n        var localVarAxiosArgs;\n        return _regeneratorRuntime().wrap(function _callee41$(_context41) {\n          while (1) switch (_context41.prev = _context41.next) {\n            case 0:\n              _context41.next = 2;\n              return localVarAxiosParamCreator.downloadFile(fileId, options);\n            case 2:\n              localVarAxiosArgs = _context41.sent;\n              return _context41.abrupt(\"return\", common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration));\n            case 4:\n            case \"end\":\n              return _context41.stop();\n          }\n        }, _callee41);\n      }));\n    },\n    /**\n     *\n     * @summary Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    listEngines: function listEngines(options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee42() {\n        var localVarAxiosArgs;\n        return _regeneratorRuntime().wrap(function _callee42$(_context42) {\n          while (1) switch (_context42.prev = _context42.next) {\n            case 0:\n              _context42.next = 2;\n              return localVarAxiosParamCreator.listEngines(options);\n            case 2:\n              localVarAxiosArgs = _context42.sent;\n              return _context42.abrupt(\"return\", common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration));\n            case 4:\n            case \"end\":\n              return _context42.stop();\n          }\n        }, _callee42);\n      }));\n    },\n    /**\n     *\n     * @summary Returns a list of files that belong to the user\\'s organization.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listFiles: function listFiles(options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee43() {\n        var localVarAxiosArgs;\n        return _regeneratorRuntime().wrap(function _callee43$(_context43) {\n          while (1) switch (_context43.prev = _context43.next) {\n            case 0:\n              _context43.next = 2;\n              return localVarAxiosParamCreator.listFiles(options);\n            case 2:\n              localVarAxiosArgs = _context43.sent;\n              return _context43.abrupt(\"return\", common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration));\n            case 4:\n            case \"end\":\n              return _context43.stop();\n          }\n        }, _callee43);\n      }));\n    },\n    /**\n     *\n     * @summary Get fine-grained status updates for a fine-tune job.\n     * @param {string} fineTuneId The ID of the fine-tune job to get events for.\n     * @param {boolean} [stream] Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listFineTuneEvents: function listFineTuneEvents(fineTuneId, stream, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee44() {\n        var localVarAxiosArgs;\n        return _regeneratorRuntime().wrap(function _callee44$(_context44) {\n          while (1) switch (_context44.prev = _context44.next) {\n            case 0:\n              _context44.next = 2;\n              return localVarAxiosParamCreator.listFineTuneEvents(fineTuneId, stream, options);\n            case 2:\n              localVarAxiosArgs = _context44.sent;\n              return _context44.abrupt(\"return\", common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration));\n            case 4:\n            case \"end\":\n              return _context44.stop();\n          }\n        }, _callee44);\n      }));\n    },\n    /**\n     *\n     * @summary List your organization\\'s fine-tuning jobs\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listFineTunes: function listFineTunes(options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee45() {\n        var localVarAxiosArgs;\n        return _regeneratorRuntime().wrap(function _callee45$(_context45) {\n          while (1) switch (_context45.prev = _context45.next) {\n            case 0:\n              _context45.next = 2;\n              return localVarAxiosParamCreator.listFineTunes(options);\n            case 2:\n              localVarAxiosArgs = _context45.sent;\n              return _context45.abrupt(\"return\", common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration));\n            case 4:\n            case \"end\":\n              return _context45.stop();\n          }\n        }, _callee45);\n      }));\n    },\n    /**\n     *\n     * @summary Lists the currently available models, and provides basic information about each one such as the owner and availability.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listModels: function listModels(options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee46() {\n        var localVarAxiosArgs;\n        return _regeneratorRuntime().wrap(function _callee46$(_context46) {\n          while (1) switch (_context46.prev = _context46.next) {\n            case 0:\n              _context46.next = 2;\n              return localVarAxiosParamCreator.listModels(options);\n            case 2:\n              localVarAxiosArgs = _context46.sent;\n              return _context46.abrupt(\"return\", common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration));\n            case 4:\n            case \"end\":\n              return _context46.stop();\n          }\n        }, _callee46);\n      }));\n    },\n    /**\n     *\n     * @summary Retrieves a model instance, providing basic information about it such as the owner and availability.\n     * @param {string} engineId The ID of the engine to use for this request\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    retrieveEngine: function retrieveEngine(engineId, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee47() {\n        var localVarAxiosArgs;\n        return _regeneratorRuntime().wrap(function _callee47$(_context47) {\n          while (1) switch (_context47.prev = _context47.next) {\n            case 0:\n              _context47.next = 2;\n              return localVarAxiosParamCreator.retrieveEngine(engineId, options);\n            case 2:\n              localVarAxiosArgs = _context47.sent;\n              return _context47.abrupt(\"return\", common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration));\n            case 4:\n            case \"end\":\n              return _context47.stop();\n          }\n        }, _callee47);\n      }));\n    },\n    /**\n     *\n     * @summary Returns information about a specific file.\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    retrieveFile: function retrieveFile(fileId, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee48() {\n        var localVarAxiosArgs;\n        return _regeneratorRuntime().wrap(function _callee48$(_context48) {\n          while (1) switch (_context48.prev = _context48.next) {\n            case 0:\n              _context48.next = 2;\n              return localVarAxiosParamCreator.retrieveFile(fileId, options);\n            case 2:\n              localVarAxiosArgs = _context48.sent;\n              return _context48.abrupt(\"return\", common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration));\n            case 4:\n            case \"end\":\n              return _context48.stop();\n          }\n        }, _callee48);\n      }));\n    },\n    /**\n     *\n     * @summary Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n     * @param {string} fineTuneId The ID of the fine-tune job\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    retrieveFineTune: function retrieveFineTune(fineTuneId, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee49() {\n        var localVarAxiosArgs;\n        return _regeneratorRuntime().wrap(function _callee49$(_context49) {\n          while (1) switch (_context49.prev = _context49.next) {\n            case 0:\n              _context49.next = 2;\n              return localVarAxiosParamCreator.retrieveFineTune(fineTuneId, options);\n            case 2:\n              localVarAxiosArgs = _context49.sent;\n              return _context49.abrupt(\"return\", common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration));\n            case 4:\n            case \"end\":\n              return _context49.stop();\n          }\n        }, _callee49);\n      }));\n    },\n    /**\n     *\n     * @summary Retrieves a model instance, providing basic information about the model such as the owner and permissioning.\n     * @param {string} model The ID of the model to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    retrieveModel: function retrieveModel(model, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee50() {\n        var localVarAxiosArgs;\n        return _regeneratorRuntime().wrap(function _callee50$(_context50) {\n          while (1) switch (_context50.prev = _context50.next) {\n            case 0:\n              _context50.next = 2;\n              return localVarAxiosParamCreator.retrieveModel(model, options);\n            case 2:\n              localVarAxiosArgs = _context50.sent;\n              return _context50.abrupt(\"return\", common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration));\n            case 4:\n            case \"end\":\n              return _context50.stop();\n          }\n        }, _callee50);\n      }));\n    }\n  };\n};\n/**\n * OpenAIApi - factory interface\n * @export\n */\nexports.OpenAIApiFactory = function (configuration, basePath, axios) {\n  var localVarFp = exports.OpenAIApiFp(configuration);\n  return {\n    /**\n     *\n     * @summary Immediately cancel a fine-tune job.\n     * @param {string} fineTuneId The ID of the fine-tune job to cancel\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cancelFineTune: function cancelFineTune(fineTuneId, options) {\n      return localVarFp.cancelFineTune(fineTuneId, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    /**\n     *\n     * @summary Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).\n     * @param {CreateAnswerRequest} createAnswerRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    createAnswer: function createAnswer(createAnswerRequest, options) {\n      return localVarFp.createAnswer(createAnswerRequest, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    /**\n     *\n     * @summary Classifies the specified `query` using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases.\n     * @param {CreateClassificationRequest} createClassificationRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    createClassification: function createClassification(createClassificationRequest, options) {\n      return localVarFp.createClassification(createClassificationRequest, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    /**\n     *\n     * @summary Creates a completion for the provided prompt and parameters\n     * @param {CreateCompletionRequest} createCompletionRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createCompletion: function createCompletion(createCompletionRequest, options) {\n      return localVarFp.createCompletion(createCompletionRequest, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    /**\n     *\n     * @summary Creates a new edit for the provided input, instruction, and parameters\n     * @param {CreateEditRequest} createEditRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createEdit: function createEdit(createEditRequest, options) {\n      return localVarFp.createEdit(createEditRequest, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    /**\n     *\n     * @summary Creates an embedding vector representing the input text.\n     * @param {CreateEmbeddingRequest} createEmbeddingRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createEmbedding: function createEmbedding(createEmbeddingRequest, options) {\n      return localVarFp.createEmbedding(createEmbeddingRequest, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    /**\n     *\n     * @summary Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.\n     * @param {File} file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\\\\&quot;fine-tune\\\\\\&quot;, each line is a JSON record with \\\\\\&quot;prompt\\\\\\&quot; and \\\\\\&quot;completion\\\\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).\n     * @param {string} purpose The intended purpose of the uploaded documents.  Use \\\\\\&quot;fine-tune\\\\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createFile: function createFile(file, purpose, options) {\n      return localVarFp.createFile(file, purpose, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    /**\n     *\n     * @summary Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n     * @param {CreateFineTuneRequest} createFineTuneRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createFineTune: function createFineTune(createFineTuneRequest, options) {\n      return localVarFp.createFineTune(createFineTuneRequest, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    /**\n     *\n     * @summary Creates an image given a prompt.\n     * @param {CreateImageRequest} createImageRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createImage: function createImage(createImageRequest, options) {\n      return localVarFp.createImage(createImageRequest, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    /**\n     *\n     * @summary Creates an edited or extended image given an original image and a prompt.\n     * @param {File} image The image to edit. Must be a valid PNG file, less than 4MB, and square.\n     * @param {File} mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.\n     * @param {string} prompt A text description of the desired image(s). The maximum length is 1000 characters.\n     * @param {number} [n] The number of images to generate. Must be between 1 and 10.\n     * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.\n     * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.\n     * @param {string} [user] A unique identifier representing your end-user, which will help OpenAI to monitor and detect abuse. [Learn more](/docs/usage-policies/end-user-ids).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createImageEdit: function createImageEdit(image, mask, prompt, n, size, responseFormat, user, options) {\n      return localVarFp.createImageEdit(image, mask, prompt, n, size, responseFormat, user, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    /**\n     *\n     * @summary Creates a variation of a given image.\n     * @param {File} image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.\n     * @param {number} [n] The number of images to generate. Must be between 1 and 10.\n     * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.\n     * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.\n     * @param {string} [user] A unique identifier representing your end-user, which will help OpenAI to monitor and detect abuse. [Learn more](/docs/usage-policies/end-user-ids).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createImageVariation: function createImageVariation(image, n, size, responseFormat, user, options) {\n      return localVarFp.createImageVariation(image, n, size, responseFormat, user, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    /**\n     *\n     * @summary Classifies if text violates OpenAI\\'s Content Policy\n     * @param {CreateModerationRequest} createModerationRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createModeration: function createModeration(createModerationRequest, options) {\n      return localVarFp.createModeration(createModerationRequest, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    /**\n     *\n     * @summary The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.\n     * @param {string} engineId The ID of the engine to use for this request.  You can select one of &#x60;ada&#x60;, &#x60;babbage&#x60;, &#x60;curie&#x60;, or &#x60;davinci&#x60;.\n     * @param {CreateSearchRequest} createSearchRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    createSearch: function createSearch(engineId, createSearchRequest, options) {\n      return localVarFp.createSearch(engineId, createSearchRequest, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    /**\n     *\n     * @summary Delete a file.\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteFile: function deleteFile(fileId, options) {\n      return localVarFp.deleteFile(fileId, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    /**\n     *\n     * @summary Delete a fine-tuned model. You must have the Owner role in your organization.\n     * @param {string} model The model to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteModel: function deleteModel(model, options) {\n      return localVarFp.deleteModel(model, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    /**\n     *\n     * @summary Returns the contents of the specified file\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    downloadFile: function downloadFile(fileId, options) {\n      return localVarFp.downloadFile(fileId, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    /**\n     *\n     * @summary Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    listEngines: function listEngines(options) {\n      return localVarFp.listEngines(options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    /**\n     *\n     * @summary Returns a list of files that belong to the user\\'s organization.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listFiles: function listFiles(options) {\n      return localVarFp.listFiles(options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    /**\n     *\n     * @summary Get fine-grained status updates for a fine-tune job.\n     * @param {string} fineTuneId The ID of the fine-tune job to get events for.\n     * @param {boolean} [stream] Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listFineTuneEvents: function listFineTuneEvents(fineTuneId, stream, options) {\n      return localVarFp.listFineTuneEvents(fineTuneId, stream, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    /**\n     *\n     * @summary List your organization\\'s fine-tuning jobs\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listFineTunes: function listFineTunes(options) {\n      return localVarFp.listFineTunes(options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    /**\n     *\n     * @summary Lists the currently available models, and provides basic information about each one such as the owner and availability.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listModels: function listModels(options) {\n      return localVarFp.listModels(options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    /**\n     *\n     * @summary Retrieves a model instance, providing basic information about it such as the owner and availability.\n     * @param {string} engineId The ID of the engine to use for this request\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    retrieveEngine: function retrieveEngine(engineId, options) {\n      return localVarFp.retrieveEngine(engineId, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    /**\n     *\n     * @summary Returns information about a specific file.\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    retrieveFile: function retrieveFile(fileId, options) {\n      return localVarFp.retrieveFile(fileId, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    /**\n     *\n     * @summary Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n     * @param {string} fineTuneId The ID of the fine-tune job\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    retrieveFineTune: function retrieveFineTune(fineTuneId, options) {\n      return localVarFp.retrieveFineTune(fineTuneId, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    },\n    /**\n     *\n     * @summary Retrieves a model instance, providing basic information about the model such as the owner and permissioning.\n     * @param {string} model The ID of the model to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    retrieveModel: function retrieveModel(model, options) {\n      return localVarFp.retrieveModel(model, options).then(function (request) {\n        return request(axios, basePath);\n      });\n    }\n  };\n};\n/**\n * OpenAIApi - object-oriented interface\n * @export\n * @class OpenAIApi\n * @extends {BaseAPI}\n */\nvar OpenAIApi = /*#__PURE__*/function (_base_1$BaseAPI) {\n  _inherits(OpenAIApi, _base_1$BaseAPI);\n  var _super = _createSuper(OpenAIApi);\n  function OpenAIApi() {\n    _classCallCheck(this, OpenAIApi);\n    return _super.apply(this, arguments);\n  }\n  _createClass(OpenAIApi, [{\n    key: \"cancelFineTune\",\n    value:\n    /**\n     *\n     * @summary Immediately cancel a fine-tune job.\n     * @param {string} fineTuneId The ID of the fine-tune job to cancel\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    function cancelFineTune(fineTuneId, options) {\n      var _this2 = this;\n      return exports.OpenAIApiFp(this.configuration).cancelFineTune(fineTuneId, options).then(function (request) {\n        return request(_this2.axios, _this2.basePath);\n      });\n    }\n    /**\n     *\n     * @summary Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).\n     * @param {CreateAnswerRequest} createAnswerRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n  }, {\n    key: \"createAnswer\",\n    value: function createAnswer(createAnswerRequest, options) {\n      var _this3 = this;\n      return exports.OpenAIApiFp(this.configuration).createAnswer(createAnswerRequest, options).then(function (request) {\n        return request(_this3.axios, _this3.basePath);\n      });\n    }\n    /**\n     *\n     * @summary Classifies the specified `query` using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases.\n     * @param {CreateClassificationRequest} createClassificationRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n  }, {\n    key: \"createClassification\",\n    value: function createClassification(createClassificationRequest, options) {\n      var _this4 = this;\n      return exports.OpenAIApiFp(this.configuration).createClassification(createClassificationRequest, options).then(function (request) {\n        return request(_this4.axios, _this4.basePath);\n      });\n    }\n    /**\n     *\n     * @summary Creates a completion for the provided prompt and parameters\n     * @param {CreateCompletionRequest} createCompletionRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n  }, {\n    key: \"createCompletion\",\n    value: function createCompletion(createCompletionRequest, options) {\n      var _this5 = this;\n      return exports.OpenAIApiFp(this.configuration).createCompletion(createCompletionRequest, options).then(function (request) {\n        return request(_this5.axios, _this5.basePath);\n      });\n    }\n    /**\n     *\n     * @summary Creates a new edit for the provided input, instruction, and parameters\n     * @param {CreateEditRequest} createEditRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n  }, {\n    key: \"createEdit\",\n    value: function createEdit(createEditRequest, options) {\n      var _this6 = this;\n      return exports.OpenAIApiFp(this.configuration).createEdit(createEditRequest, options).then(function (request) {\n        return request(_this6.axios, _this6.basePath);\n      });\n    }\n    /**\n     *\n     * @summary Creates an embedding vector representing the input text.\n     * @param {CreateEmbeddingRequest} createEmbeddingRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n  }, {\n    key: \"createEmbedding\",\n    value: function createEmbedding(createEmbeddingRequest, options) {\n      var _this7 = this;\n      return exports.OpenAIApiFp(this.configuration).createEmbedding(createEmbeddingRequest, options).then(function (request) {\n        return request(_this7.axios, _this7.basePath);\n      });\n    }\n    /**\n     *\n     * @summary Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.\n     * @param {File} file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\\\\&quot;fine-tune\\\\\\&quot;, each line is a JSON record with \\\\\\&quot;prompt\\\\\\&quot; and \\\\\\&quot;completion\\\\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).\n     * @param {string} purpose The intended purpose of the uploaded documents.  Use \\\\\\&quot;fine-tune\\\\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n  }, {\n    key: \"createFile\",\n    value: function createFile(file, purpose, options) {\n      var _this8 = this;\n      return exports.OpenAIApiFp(this.configuration).createFile(file, purpose, options).then(function (request) {\n        return request(_this8.axios, _this8.basePath);\n      });\n    }\n    /**\n     *\n     * @summary Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n     * @param {CreateFineTuneRequest} createFineTuneRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n  }, {\n    key: \"createFineTune\",\n    value: function createFineTune(createFineTuneRequest, options) {\n      var _this9 = this;\n      return exports.OpenAIApiFp(this.configuration).createFineTune(createFineTuneRequest, options).then(function (request) {\n        return request(_this9.axios, _this9.basePath);\n      });\n    }\n    /**\n     *\n     * @summary Creates an image given a prompt.\n     * @param {CreateImageRequest} createImageRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n  }, {\n    key: \"createImage\",\n    value: function createImage(createImageRequest, options) {\n      var _this10 = this;\n      return exports.OpenAIApiFp(this.configuration).createImage(createImageRequest, options).then(function (request) {\n        return request(_this10.axios, _this10.basePath);\n      });\n    }\n    /**\n     *\n     * @summary Creates an edited or extended image given an original image and a prompt.\n     * @param {File} image The image to edit. Must be a valid PNG file, less than 4MB, and square.\n     * @param {File} mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.\n     * @param {string} prompt A text description of the desired image(s). The maximum length is 1000 characters.\n     * @param {number} [n] The number of images to generate. Must be between 1 and 10.\n     * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.\n     * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.\n     * @param {string} [user] A unique identifier representing your end-user, which will help OpenAI to monitor and detect abuse. [Learn more](/docs/usage-policies/end-user-ids).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n  }, {\n    key: \"createImageEdit\",\n    value: function createImageEdit(image, mask, prompt, n, size, responseFormat, user, options) {\n      var _this11 = this;\n      return exports.OpenAIApiFp(this.configuration).createImageEdit(image, mask, prompt, n, size, responseFormat, user, options).then(function (request) {\n        return request(_this11.axios, _this11.basePath);\n      });\n    }\n    /**\n     *\n     * @summary Creates a variation of a given image.\n     * @param {File} image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.\n     * @param {number} [n] The number of images to generate. Must be between 1 and 10.\n     * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.\n     * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.\n     * @param {string} [user] A unique identifier representing your end-user, which will help OpenAI to monitor and detect abuse. [Learn more](/docs/usage-policies/end-user-ids).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n  }, {\n    key: \"createImageVariation\",\n    value: function createImageVariation(image, n, size, responseFormat, user, options) {\n      var _this12 = this;\n      return exports.OpenAIApiFp(this.configuration).createImageVariation(image, n, size, responseFormat, user, options).then(function (request) {\n        return request(_this12.axios, _this12.basePath);\n      });\n    }\n    /**\n     *\n     * @summary Classifies if text violates OpenAI\\'s Content Policy\n     * @param {CreateModerationRequest} createModerationRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n  }, {\n    key: \"createModeration\",\n    value: function createModeration(createModerationRequest, options) {\n      var _this13 = this;\n      return exports.OpenAIApiFp(this.configuration).createModeration(createModerationRequest, options).then(function (request) {\n        return request(_this13.axios, _this13.basePath);\n      });\n    }\n    /**\n     *\n     * @summary The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.\n     * @param {string} engineId The ID of the engine to use for this request.  You can select one of &#x60;ada&#x60;, &#x60;babbage&#x60;, &#x60;curie&#x60;, or &#x60;davinci&#x60;.\n     * @param {CreateSearchRequest} createSearchRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n  }, {\n    key: \"createSearch\",\n    value: function createSearch(engineId, createSearchRequest, options) {\n      var _this14 = this;\n      return exports.OpenAIApiFp(this.configuration).createSearch(engineId, createSearchRequest, options).then(function (request) {\n        return request(_this14.axios, _this14.basePath);\n      });\n    }\n    /**\n     *\n     * @summary Delete a file.\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n  }, {\n    key: \"deleteFile\",\n    value: function deleteFile(fileId, options) {\n      var _this15 = this;\n      return exports.OpenAIApiFp(this.configuration).deleteFile(fileId, options).then(function (request) {\n        return request(_this15.axios, _this15.basePath);\n      });\n    }\n    /**\n     *\n     * @summary Delete a fine-tuned model. You must have the Owner role in your organization.\n     * @param {string} model The model to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n  }, {\n    key: \"deleteModel\",\n    value: function deleteModel(model, options) {\n      var _this16 = this;\n      return exports.OpenAIApiFp(this.configuration).deleteModel(model, options).then(function (request) {\n        return request(_this16.axios, _this16.basePath);\n      });\n    }\n    /**\n     *\n     * @summary Returns the contents of the specified file\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n  }, {\n    key: \"downloadFile\",\n    value: function downloadFile(fileId, options) {\n      var _this17 = this;\n      return exports.OpenAIApiFp(this.configuration).downloadFile(fileId, options).then(function (request) {\n        return request(_this17.axios, _this17.basePath);\n      });\n    }\n    /**\n     *\n     * @summary Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n  }, {\n    key: \"listEngines\",\n    value: function listEngines(options) {\n      var _this18 = this;\n      return exports.OpenAIApiFp(this.configuration).listEngines(options).then(function (request) {\n        return request(_this18.axios, _this18.basePath);\n      });\n    }\n    /**\n     *\n     * @summary Returns a list of files that belong to the user\\'s organization.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n  }, {\n    key: \"listFiles\",\n    value: function listFiles(options) {\n      var _this19 = this;\n      return exports.OpenAIApiFp(this.configuration).listFiles(options).then(function (request) {\n        return request(_this19.axios, _this19.basePath);\n      });\n    }\n    /**\n     *\n     * @summary Get fine-grained status updates for a fine-tune job.\n     * @param {string} fineTuneId The ID of the fine-tune job to get events for.\n     * @param {boolean} [stream] Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n  }, {\n    key: \"listFineTuneEvents\",\n    value: function listFineTuneEvents(fineTuneId, stream, options) {\n      var _this20 = this;\n      return exports.OpenAIApiFp(this.configuration).listFineTuneEvents(fineTuneId, stream, options).then(function (request) {\n        return request(_this20.axios, _this20.basePath);\n      });\n    }\n    /**\n     *\n     * @summary List your organization\\'s fine-tuning jobs\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n  }, {\n    key: \"listFineTunes\",\n    value: function listFineTunes(options) {\n      var _this21 = this;\n      return exports.OpenAIApiFp(this.configuration).listFineTunes(options).then(function (request) {\n        return request(_this21.axios, _this21.basePath);\n      });\n    }\n    /**\n     *\n     * @summary Lists the currently available models, and provides basic information about each one such as the owner and availability.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n  }, {\n    key: \"listModels\",\n    value: function listModels(options) {\n      var _this22 = this;\n      return exports.OpenAIApiFp(this.configuration).listModels(options).then(function (request) {\n        return request(_this22.axios, _this22.basePath);\n      });\n    }\n    /**\n     *\n     * @summary Retrieves a model instance, providing basic information about it such as the owner and availability.\n     * @param {string} engineId The ID of the engine to use for this request\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n  }, {\n    key: \"retrieveEngine\",\n    value: function retrieveEngine(engineId, options) {\n      var _this23 = this;\n      return exports.OpenAIApiFp(this.configuration).retrieveEngine(engineId, options).then(function (request) {\n        return request(_this23.axios, _this23.basePath);\n      });\n    }\n    /**\n     *\n     * @summary Returns information about a specific file.\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n  }, {\n    key: \"retrieveFile\",\n    value: function retrieveFile(fileId, options) {\n      var _this24 = this;\n      return exports.OpenAIApiFp(this.configuration).retrieveFile(fileId, options).then(function (request) {\n        return request(_this24.axios, _this24.basePath);\n      });\n    }\n    /**\n     *\n     * @summary Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n     * @param {string} fineTuneId The ID of the fine-tune job\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n  }, {\n    key: \"retrieveFineTune\",\n    value: function retrieveFineTune(fineTuneId, options) {\n      var _this25 = this;\n      return exports.OpenAIApiFp(this.configuration).retrieveFineTune(fineTuneId, options).then(function (request) {\n        return request(_this25.axios, _this25.basePath);\n      });\n    }\n    /**\n     *\n     * @summary Retrieves a model instance, providing basic information about the model such as the owner and permissioning.\n     * @param {string} model The ID of the model to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n  }, {\n    key: \"retrieveModel\",\n    value: function retrieveModel(model, options) {\n      var _this26 = this;\n      return exports.OpenAIApiFp(this.configuration).retrieveModel(model, options).then(function (request) {\n        return request(_this26.axios, _this26.basePath);\n      });\n    }\n  }]);\n  return OpenAIApi;\n}(base_1.BaseAPI);\nexports.OpenAIApi = OpenAIApi;","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","OpenAIApi","OpenAIApiFactory","OpenAIApiFp","OpenAIApiAxiosParamCreator","CreateImageRequestResponseFormatEnum","CreateImageRequestSizeEnum","axios_1","require","common_1","base_1","_256x256","_512x512","_1024x1024","Url","B64Json","configuration","cancelFineTune","fineTuneId","options","assertParamExists","localVarPath","replace","encodeURIComponent","String","localVarUrlObj","URL","DUMMY_BASE_URL","baseOptions","localVarRequestOptions","assign","method","localVarHeaderParameter","localVarQueryParameter","setSearchParams","headersFromBaseOptions","headers","url","toPathString","createAnswer","createAnswerRequest","data","serializeDataIfNeeded","createClassification","createClassificationRequest","createCompletion","createCompletionRequest","createEdit","createEditRequest","createEmbedding","createEmbeddingRequest","createFile","file","purpose","localVarFormParams","formDataCtor","FormData","undefined","append","getHeaders","createFineTune","createFineTuneRequest","createImage","createImageRequest","createImageEdit","image","mask","prompt","n","size","responseFormat","user","createImageVariation","createModeration","createModerationRequest","createSearch","engineId","createSearchRequest","deleteFile","fileId","deleteModel","model","downloadFile","listEngines","listFiles","listFineTuneEvents","stream","listFineTunes","listModels","retrieveEngine","retrieveFile","retrieveFineTune","retrieveModel","localVarAxiosParamCreator","localVarAxiosArgs","createRequestFunction","default","BASE_PATH","basePath","axios","localVarFp","request","BaseAPI"],"sources":["C:/Users/mrodri/Desktop/dalle-master/node_modules/openai/dist/api.js"],"sourcesContent":["\"use strict\";\n/* tslint:disable */\n/* eslint-disable */\n/**\n * OpenAI API\n * APIs for sampling from and fine-tuning language models\n *\n * The version of the OpenAPI document: 1.1.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OpenAIApi = exports.OpenAIApiFactory = exports.OpenAIApiFp = exports.OpenAIApiAxiosParamCreator = exports.CreateImageRequestResponseFormatEnum = exports.CreateImageRequestSizeEnum = void 0;\nconst axios_1 = require(\"axios\");\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = require(\"./common\");\n// @ts-ignore\nconst base_1 = require(\"./base\");\nexports.CreateImageRequestSizeEnum = {\n    _256x256: '256x256',\n    _512x512: '512x512',\n    _1024x1024: '1024x1024'\n};\nexports.CreateImageRequestResponseFormatEnum = {\n    Url: 'url',\n    B64Json: 'b64_json'\n};\n/**\n * OpenAIApi - axios parameter creator\n * @export\n */\nexports.OpenAIApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Immediately cancel a fine-tune job.\n         * @param {string} fineTuneId The ID of the fine-tune job to cancel\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        cancelFineTune: (fineTuneId, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'fineTuneId' is not null or undefined\n            common_1.assertParamExists('cancelFineTune', 'fineTuneId', fineTuneId);\n            const localVarPath = `/fine-tunes/{fine_tune_id}/cancel`\n                .replace(`{${\"fine_tune_id\"}}`, encodeURIComponent(String(fineTuneId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).\n         * @param {CreateAnswerRequest} createAnswerRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        createAnswer: (createAnswerRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'createAnswerRequest' is not null or undefined\n            common_1.assertParamExists('createAnswer', 'createAnswerRequest', createAnswerRequest);\n            const localVarPath = `/answers`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createAnswerRequest, localVarRequestOptions, configuration);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Classifies the specified `query` using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases.\n         * @param {CreateClassificationRequest} createClassificationRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        createClassification: (createClassificationRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'createClassificationRequest' is not null or undefined\n            common_1.assertParamExists('createClassification', 'createClassificationRequest', createClassificationRequest);\n            const localVarPath = `/classifications`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createClassificationRequest, localVarRequestOptions, configuration);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Creates a completion for the provided prompt and parameters\n         * @param {CreateCompletionRequest} createCompletionRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createCompletion: (createCompletionRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'createCompletionRequest' is not null or undefined\n            common_1.assertParamExists('createCompletion', 'createCompletionRequest', createCompletionRequest);\n            const localVarPath = `/completions`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createCompletionRequest, localVarRequestOptions, configuration);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Creates a new edit for the provided input, instruction, and parameters\n         * @param {CreateEditRequest} createEditRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createEdit: (createEditRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'createEditRequest' is not null or undefined\n            common_1.assertParamExists('createEdit', 'createEditRequest', createEditRequest);\n            const localVarPath = `/edits`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createEditRequest, localVarRequestOptions, configuration);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Creates an embedding vector representing the input text.\n         * @param {CreateEmbeddingRequest} createEmbeddingRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createEmbedding: (createEmbeddingRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'createEmbeddingRequest' is not null or undefined\n            common_1.assertParamExists('createEmbedding', 'createEmbeddingRequest', createEmbeddingRequest);\n            const localVarPath = `/embeddings`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createEmbeddingRequest, localVarRequestOptions, configuration);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.\n         * @param {File} file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\\\\&quot;fine-tune\\\\\\&quot;, each line is a JSON record with \\\\\\&quot;prompt\\\\\\&quot; and \\\\\\&quot;completion\\\\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).\n         * @param {string} purpose The intended purpose of the uploaded documents.  Use \\\\\\&quot;fine-tune\\\\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFile: (file, purpose, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'file' is not null or undefined\n            common_1.assertParamExists('createFile', 'file', file);\n            // verify required parameter 'purpose' is not null or undefined\n            common_1.assertParamExists('createFile', 'purpose', purpose);\n            const localVarPath = `/files`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();\n            if (file !== undefined) {\n                localVarFormParams.append('file', file);\n            }\n            if (purpose !== undefined) {\n                localVarFormParams.append('purpose', purpose);\n            }\n            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), localVarFormParams.getHeaders()), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = localVarFormParams;\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n         * @param {CreateFineTuneRequest} createFineTuneRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFineTune: (createFineTuneRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'createFineTuneRequest' is not null or undefined\n            common_1.assertParamExists('createFineTune', 'createFineTuneRequest', createFineTuneRequest);\n            const localVarPath = `/fine-tunes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createFineTuneRequest, localVarRequestOptions, configuration);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Creates an image given a prompt.\n         * @param {CreateImageRequest} createImageRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage: (createImageRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'createImageRequest' is not null or undefined\n            common_1.assertParamExists('createImage', 'createImageRequest', createImageRequest);\n            const localVarPath = `/images/generations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createImageRequest, localVarRequestOptions, configuration);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Creates an edited or extended image given an original image and a prompt.\n         * @param {File} image The image to edit. Must be a valid PNG file, less than 4MB, and square.\n         * @param {File} mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.\n         * @param {string} prompt A text description of the desired image(s). The maximum length is 1000 characters.\n         * @param {number} [n] The number of images to generate. Must be between 1 and 10.\n         * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.\n         * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.\n         * @param {string} [user] A unique identifier representing your end-user, which will help OpenAI to monitor and detect abuse. [Learn more](/docs/usage-policies/end-user-ids).\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImageEdit: (image, mask, prompt, n, size, responseFormat, user, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'image' is not null or undefined\n            common_1.assertParamExists('createImageEdit', 'image', image);\n            // verify required parameter 'mask' is not null or undefined\n            common_1.assertParamExists('createImageEdit', 'mask', mask);\n            // verify required parameter 'prompt' is not null or undefined\n            common_1.assertParamExists('createImageEdit', 'prompt', prompt);\n            const localVarPath = `/images/edits`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();\n            if (image !== undefined) {\n                localVarFormParams.append('image', image);\n            }\n            if (mask !== undefined) {\n                localVarFormParams.append('mask', mask);\n            }\n            if (prompt !== undefined) {\n                localVarFormParams.append('prompt', prompt);\n            }\n            if (n !== undefined) {\n                localVarFormParams.append('n', n);\n            }\n            if (size !== undefined) {\n                localVarFormParams.append('size', size);\n            }\n            if (responseFormat !== undefined) {\n                localVarFormParams.append('response_format', responseFormat);\n            }\n            if (user !== undefined) {\n                localVarFormParams.append('user', user);\n            }\n            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), localVarFormParams.getHeaders()), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = localVarFormParams;\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Creates a variation of a given image.\n         * @param {File} image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.\n         * @param {number} [n] The number of images to generate. Must be between 1 and 10.\n         * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.\n         * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.\n         * @param {string} [user] A unique identifier representing your end-user, which will help OpenAI to monitor and detect abuse. [Learn more](/docs/usage-policies/end-user-ids).\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImageVariation: (image, n, size, responseFormat, user, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'image' is not null or undefined\n            common_1.assertParamExists('createImageVariation', 'image', image);\n            const localVarPath = `/images/variations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();\n            if (image !== undefined) {\n                localVarFormParams.append('image', image);\n            }\n            if (n !== undefined) {\n                localVarFormParams.append('n', n);\n            }\n            if (size !== undefined) {\n                localVarFormParams.append('size', size);\n            }\n            if (responseFormat !== undefined) {\n                localVarFormParams.append('response_format', responseFormat);\n            }\n            if (user !== undefined) {\n                localVarFormParams.append('user', user);\n            }\n            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), localVarFormParams.getHeaders()), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = localVarFormParams;\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Classifies if text violates OpenAI\\'s Content Policy\n         * @param {CreateModerationRequest} createModerationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createModeration: (createModerationRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'createModerationRequest' is not null or undefined\n            common_1.assertParamExists('createModeration', 'createModerationRequest', createModerationRequest);\n            const localVarPath = `/moderations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createModerationRequest, localVarRequestOptions, configuration);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.\n         * @param {string} engineId The ID of the engine to use for this request.  You can select one of &#x60;ada&#x60;, &#x60;babbage&#x60;, &#x60;curie&#x60;, or &#x60;davinci&#x60;.\n         * @param {CreateSearchRequest} createSearchRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        createSearch: (engineId, createSearchRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'engineId' is not null or undefined\n            common_1.assertParamExists('createSearch', 'engineId', engineId);\n            // verify required parameter 'createSearchRequest' is not null or undefined\n            common_1.assertParamExists('createSearch', 'createSearchRequest', createSearchRequest);\n            const localVarPath = `/engines/{engine_id}/search`\n                .replace(`{${\"engine_id\"}}`, encodeURIComponent(String(engineId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createSearchRequest, localVarRequestOptions, configuration);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Delete a file.\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteFile: (fileId, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'fileId' is not null or undefined\n            common_1.assertParamExists('deleteFile', 'fileId', fileId);\n            const localVarPath = `/files/{file_id}`\n                .replace(`{${\"file_id\"}}`, encodeURIComponent(String(fileId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Delete a fine-tuned model. You must have the Owner role in your organization.\n         * @param {string} model The model to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteModel: (model, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'model' is not null or undefined\n            common_1.assertParamExists('deleteModel', 'model', model);\n            const localVarPath = `/models/{model}`\n                .replace(`{${\"model\"}}`, encodeURIComponent(String(model)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Returns the contents of the specified file\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        downloadFile: (fileId, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'fileId' is not null or undefined\n            common_1.assertParamExists('downloadFile', 'fileId', fileId);\n            const localVarPath = `/files/{file_id}/content`\n                .replace(`{${\"file_id\"}}`, encodeURIComponent(String(fileId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        listEngines: (options = {}) => __awaiter(this, void 0, void 0, function* () {\n            const localVarPath = `/engines`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Returns a list of files that belong to the user\\'s organization.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFiles: (options = {}) => __awaiter(this, void 0, void 0, function* () {\n            const localVarPath = `/files`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Get fine-grained status updates for a fine-tune job.\n         * @param {string} fineTuneId The ID of the fine-tune job to get events for.\n         * @param {boolean} [stream] Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFineTuneEvents: (fineTuneId, stream, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'fineTuneId' is not null or undefined\n            common_1.assertParamExists('listFineTuneEvents', 'fineTuneId', fineTuneId);\n            const localVarPath = `/fine-tunes/{fine_tune_id}/events`\n                .replace(`{${\"fine_tune_id\"}}`, encodeURIComponent(String(fineTuneId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            if (stream !== undefined) {\n                localVarQueryParameter['stream'] = stream;\n            }\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary List your organization\\'s fine-tuning jobs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFineTunes: (options = {}) => __awaiter(this, void 0, void 0, function* () {\n            const localVarPath = `/fine-tunes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Lists the currently available models, and provides basic information about each one such as the owner and availability.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listModels: (options = {}) => __awaiter(this, void 0, void 0, function* () {\n            const localVarPath = `/models`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Retrieves a model instance, providing basic information about it such as the owner and availability.\n         * @param {string} engineId The ID of the engine to use for this request\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        retrieveEngine: (engineId, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'engineId' is not null or undefined\n            common_1.assertParamExists('retrieveEngine', 'engineId', engineId);\n            const localVarPath = `/engines/{engine_id}`\n                .replace(`{${\"engine_id\"}}`, encodeURIComponent(String(engineId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Returns information about a specific file.\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveFile: (fileId, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'fileId' is not null or undefined\n            common_1.assertParamExists('retrieveFile', 'fileId', fileId);\n            const localVarPath = `/files/{file_id}`\n                .replace(`{${\"file_id\"}}`, encodeURIComponent(String(fileId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n         * @param {string} fineTuneId The ID of the fine-tune job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveFineTune: (fineTuneId, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'fineTuneId' is not null or undefined\n            common_1.assertParamExists('retrieveFineTune', 'fineTuneId', fineTuneId);\n            const localVarPath = `/fine-tunes/{fine_tune_id}`\n                .replace(`{${\"fine_tune_id\"}}`, encodeURIComponent(String(fineTuneId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Retrieves a model instance, providing basic information about the model such as the owner and permissioning.\n         * @param {string} model The ID of the model to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveModel: (model, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'model' is not null or undefined\n            common_1.assertParamExists('retrieveModel', 'model', model);\n            const localVarPath = `/models/{model}`\n                .replace(`{${\"model\"}}`, encodeURIComponent(String(model)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n    };\n};\n/**\n * OpenAIApi - functional programming interface\n * @export\n */\nexports.OpenAIApiFp = function (configuration) {\n    const localVarAxiosParamCreator = exports.OpenAIApiAxiosParamCreator(configuration);\n    return {\n        /**\n         *\n         * @summary Immediately cancel a fine-tune job.\n         * @param {string} fineTuneId The ID of the fine-tune job to cancel\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        cancelFineTune(fineTuneId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.cancelFineTune(fineTuneId, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).\n         * @param {CreateAnswerRequest} createAnswerRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        createAnswer(createAnswerRequest, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAnswer(createAnswerRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Classifies the specified `query` using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases.\n         * @param {CreateClassificationRequest} createClassificationRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        createClassification(createClassificationRequest, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createClassification(createClassificationRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Creates a completion for the provided prompt and parameters\n         * @param {CreateCompletionRequest} createCompletionRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createCompletion(createCompletionRequest, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createCompletion(createCompletionRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Creates a new edit for the provided input, instruction, and parameters\n         * @param {CreateEditRequest} createEditRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createEdit(createEditRequest, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createEdit(createEditRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Creates an embedding vector representing the input text.\n         * @param {CreateEmbeddingRequest} createEmbeddingRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createEmbedding(createEmbeddingRequest, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createEmbedding(createEmbeddingRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.\n         * @param {File} file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\\\\&quot;fine-tune\\\\\\&quot;, each line is a JSON record with \\\\\\&quot;prompt\\\\\\&quot; and \\\\\\&quot;completion\\\\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).\n         * @param {string} purpose The intended purpose of the uploaded documents.  Use \\\\\\&quot;fine-tune\\\\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFile(file, purpose, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createFile(file, purpose, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n         * @param {CreateFineTuneRequest} createFineTuneRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFineTune(createFineTuneRequest, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createFineTune(createFineTuneRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Creates an image given a prompt.\n         * @param {CreateImageRequest} createImageRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage(createImageRequest, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createImage(createImageRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Creates an edited or extended image given an original image and a prompt.\n         * @param {File} image The image to edit. Must be a valid PNG file, less than 4MB, and square.\n         * @param {File} mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.\n         * @param {string} prompt A text description of the desired image(s). The maximum length is 1000 characters.\n         * @param {number} [n] The number of images to generate. Must be between 1 and 10.\n         * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.\n         * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.\n         * @param {string} [user] A unique identifier representing your end-user, which will help OpenAI to monitor and detect abuse. [Learn more](/docs/usage-policies/end-user-ids).\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImageEdit(image, mask, prompt, n, size, responseFormat, user, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createImageEdit(image, mask, prompt, n, size, responseFormat, user, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Creates a variation of a given image.\n         * @param {File} image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.\n         * @param {number} [n] The number of images to generate. Must be between 1 and 10.\n         * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.\n         * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.\n         * @param {string} [user] A unique identifier representing your end-user, which will help OpenAI to monitor and detect abuse. [Learn more](/docs/usage-policies/end-user-ids).\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImageVariation(image, n, size, responseFormat, user, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createImageVariation(image, n, size, responseFormat, user, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Classifies if text violates OpenAI\\'s Content Policy\n         * @param {CreateModerationRequest} createModerationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createModeration(createModerationRequest, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createModeration(createModerationRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.\n         * @param {string} engineId The ID of the engine to use for this request.  You can select one of &#x60;ada&#x60;, &#x60;babbage&#x60;, &#x60;curie&#x60;, or &#x60;davinci&#x60;.\n         * @param {CreateSearchRequest} createSearchRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        createSearch(engineId, createSearchRequest, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createSearch(engineId, createSearchRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Delete a file.\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteFile(fileId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteFile(fileId, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Delete a fine-tuned model. You must have the Owner role in your organization.\n         * @param {string} model The model to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteModel(model, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteModel(model, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Returns the contents of the specified file\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        downloadFile(fileId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.downloadFile(fileId, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        listEngines(options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.listEngines(options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Returns a list of files that belong to the user\\'s organization.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFiles(options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.listFiles(options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Get fine-grained status updates for a fine-tune job.\n         * @param {string} fineTuneId The ID of the fine-tune job to get events for.\n         * @param {boolean} [stream] Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFineTuneEvents(fineTuneId, stream, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.listFineTuneEvents(fineTuneId, stream, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary List your organization\\'s fine-tuning jobs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFineTunes(options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.listFineTunes(options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Lists the currently available models, and provides basic information about each one such as the owner and availability.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listModels(options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModels(options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Retrieves a model instance, providing basic information about it such as the owner and availability.\n         * @param {string} engineId The ID of the engine to use for this request\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        retrieveEngine(engineId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveEngine(engineId, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Returns information about a specific file.\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveFile(fileId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveFile(fileId, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n         * @param {string} fineTuneId The ID of the fine-tune job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveFineTune(fineTuneId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveFineTune(fineTuneId, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Retrieves a model instance, providing basic information about the model such as the owner and permissioning.\n         * @param {string} model The ID of the model to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveModel(model, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveModel(model, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n    };\n};\n/**\n * OpenAIApi - factory interface\n * @export\n */\nexports.OpenAIApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = exports.OpenAIApiFp(configuration);\n    return {\n        /**\n         *\n         * @summary Immediately cancel a fine-tune job.\n         * @param {string} fineTuneId The ID of the fine-tune job to cancel\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        cancelFineTune(fineTuneId, options) {\n            return localVarFp.cancelFineTune(fineTuneId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).\n         * @param {CreateAnswerRequest} createAnswerRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        createAnswer(createAnswerRequest, options) {\n            return localVarFp.createAnswer(createAnswerRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Classifies the specified `query` using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases.\n         * @param {CreateClassificationRequest} createClassificationRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        createClassification(createClassificationRequest, options) {\n            return localVarFp.createClassification(createClassificationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Creates a completion for the provided prompt and parameters\n         * @param {CreateCompletionRequest} createCompletionRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createCompletion(createCompletionRequest, options) {\n            return localVarFp.createCompletion(createCompletionRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Creates a new edit for the provided input, instruction, and parameters\n         * @param {CreateEditRequest} createEditRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createEdit(createEditRequest, options) {\n            return localVarFp.createEdit(createEditRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Creates an embedding vector representing the input text.\n         * @param {CreateEmbeddingRequest} createEmbeddingRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createEmbedding(createEmbeddingRequest, options) {\n            return localVarFp.createEmbedding(createEmbeddingRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.\n         * @param {File} file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\\\\&quot;fine-tune\\\\\\&quot;, each line is a JSON record with \\\\\\&quot;prompt\\\\\\&quot; and \\\\\\&quot;completion\\\\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).\n         * @param {string} purpose The intended purpose of the uploaded documents.  Use \\\\\\&quot;fine-tune\\\\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFile(file, purpose, options) {\n            return localVarFp.createFile(file, purpose, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n         * @param {CreateFineTuneRequest} createFineTuneRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFineTune(createFineTuneRequest, options) {\n            return localVarFp.createFineTune(createFineTuneRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Creates an image given a prompt.\n         * @param {CreateImageRequest} createImageRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImage(createImageRequest, options) {\n            return localVarFp.createImage(createImageRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Creates an edited or extended image given an original image and a prompt.\n         * @param {File} image The image to edit. Must be a valid PNG file, less than 4MB, and square.\n         * @param {File} mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.\n         * @param {string} prompt A text description of the desired image(s). The maximum length is 1000 characters.\n         * @param {number} [n] The number of images to generate. Must be between 1 and 10.\n         * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.\n         * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.\n         * @param {string} [user] A unique identifier representing your end-user, which will help OpenAI to monitor and detect abuse. [Learn more](/docs/usage-policies/end-user-ids).\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImageEdit(image, mask, prompt, n, size, responseFormat, user, options) {\n            return localVarFp.createImageEdit(image, mask, prompt, n, size, responseFormat, user, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Creates a variation of a given image.\n         * @param {File} image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.\n         * @param {number} [n] The number of images to generate. Must be between 1 and 10.\n         * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.\n         * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.\n         * @param {string} [user] A unique identifier representing your end-user, which will help OpenAI to monitor and detect abuse. [Learn more](/docs/usage-policies/end-user-ids).\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createImageVariation(image, n, size, responseFormat, user, options) {\n            return localVarFp.createImageVariation(image, n, size, responseFormat, user, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Classifies if text violates OpenAI\\'s Content Policy\n         * @param {CreateModerationRequest} createModerationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createModeration(createModerationRequest, options) {\n            return localVarFp.createModeration(createModerationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.\n         * @param {string} engineId The ID of the engine to use for this request.  You can select one of &#x60;ada&#x60;, &#x60;babbage&#x60;, &#x60;curie&#x60;, or &#x60;davinci&#x60;.\n         * @param {CreateSearchRequest} createSearchRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        createSearch(engineId, createSearchRequest, options) {\n            return localVarFp.createSearch(engineId, createSearchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Delete a file.\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteFile(fileId, options) {\n            return localVarFp.deleteFile(fileId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Delete a fine-tuned model. You must have the Owner role in your organization.\n         * @param {string} model The model to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteModel(model, options) {\n            return localVarFp.deleteModel(model, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Returns the contents of the specified file\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        downloadFile(fileId, options) {\n            return localVarFp.downloadFile(fileId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        listEngines(options) {\n            return localVarFp.listEngines(options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Returns a list of files that belong to the user\\'s organization.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFiles(options) {\n            return localVarFp.listFiles(options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Get fine-grained status updates for a fine-tune job.\n         * @param {string} fineTuneId The ID of the fine-tune job to get events for.\n         * @param {boolean} [stream] Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFineTuneEvents(fineTuneId, stream, options) {\n            return localVarFp.listFineTuneEvents(fineTuneId, stream, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary List your organization\\'s fine-tuning jobs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFineTunes(options) {\n            return localVarFp.listFineTunes(options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Lists the currently available models, and provides basic information about each one such as the owner and availability.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listModels(options) {\n            return localVarFp.listModels(options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Retrieves a model instance, providing basic information about it such as the owner and availability.\n         * @param {string} engineId The ID of the engine to use for this request\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        retrieveEngine(engineId, options) {\n            return localVarFp.retrieveEngine(engineId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Returns information about a specific file.\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveFile(fileId, options) {\n            return localVarFp.retrieveFile(fileId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n         * @param {string} fineTuneId The ID of the fine-tune job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveFineTune(fineTuneId, options) {\n            return localVarFp.retrieveFineTune(fineTuneId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Retrieves a model instance, providing basic information about the model such as the owner and permissioning.\n         * @param {string} model The ID of the model to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveModel(model, options) {\n            return localVarFp.retrieveModel(model, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n/**\n * OpenAIApi - object-oriented interface\n * @export\n * @class OpenAIApi\n * @extends {BaseAPI}\n */\nclass OpenAIApi extends base_1.BaseAPI {\n    /**\n     *\n     * @summary Immediately cancel a fine-tune job.\n     * @param {string} fineTuneId The ID of the fine-tune job to cancel\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    cancelFineTune(fineTuneId, options) {\n        return exports.OpenAIApiFp(this.configuration).cancelFineTune(fineTuneId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).\n     * @param {CreateAnswerRequest} createAnswerRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    createAnswer(createAnswerRequest, options) {\n        return exports.OpenAIApiFp(this.configuration).createAnswer(createAnswerRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Classifies the specified `query` using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases.\n     * @param {CreateClassificationRequest} createClassificationRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    createClassification(createClassificationRequest, options) {\n        return exports.OpenAIApiFp(this.configuration).createClassification(createClassificationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Creates a completion for the provided prompt and parameters\n     * @param {CreateCompletionRequest} createCompletionRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    createCompletion(createCompletionRequest, options) {\n        return exports.OpenAIApiFp(this.configuration).createCompletion(createCompletionRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Creates a new edit for the provided input, instruction, and parameters\n     * @param {CreateEditRequest} createEditRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    createEdit(createEditRequest, options) {\n        return exports.OpenAIApiFp(this.configuration).createEdit(createEditRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Creates an embedding vector representing the input text.\n     * @param {CreateEmbeddingRequest} createEmbeddingRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    createEmbedding(createEmbeddingRequest, options) {\n        return exports.OpenAIApiFp(this.configuration).createEmbedding(createEmbeddingRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.\n     * @param {File} file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\\\\&quot;fine-tune\\\\\\&quot;, each line is a JSON record with \\\\\\&quot;prompt\\\\\\&quot; and \\\\\\&quot;completion\\\\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).\n     * @param {string} purpose The intended purpose of the uploaded documents.  Use \\\\\\&quot;fine-tune\\\\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    createFile(file, purpose, options) {\n        return exports.OpenAIApiFp(this.configuration).createFile(file, purpose, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n     * @param {CreateFineTuneRequest} createFineTuneRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    createFineTune(createFineTuneRequest, options) {\n        return exports.OpenAIApiFp(this.configuration).createFineTune(createFineTuneRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Creates an image given a prompt.\n     * @param {CreateImageRequest} createImageRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    createImage(createImageRequest, options) {\n        return exports.OpenAIApiFp(this.configuration).createImage(createImageRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Creates an edited or extended image given an original image and a prompt.\n     * @param {File} image The image to edit. Must be a valid PNG file, less than 4MB, and square.\n     * @param {File} mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.\n     * @param {string} prompt A text description of the desired image(s). The maximum length is 1000 characters.\n     * @param {number} [n] The number of images to generate. Must be between 1 and 10.\n     * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.\n     * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.\n     * @param {string} [user] A unique identifier representing your end-user, which will help OpenAI to monitor and detect abuse. [Learn more](/docs/usage-policies/end-user-ids).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    createImageEdit(image, mask, prompt, n, size, responseFormat, user, options) {\n        return exports.OpenAIApiFp(this.configuration).createImageEdit(image, mask, prompt, n, size, responseFormat, user, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Creates a variation of a given image.\n     * @param {File} image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.\n     * @param {number} [n] The number of images to generate. Must be between 1 and 10.\n     * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.\n     * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.\n     * @param {string} [user] A unique identifier representing your end-user, which will help OpenAI to monitor and detect abuse. [Learn more](/docs/usage-policies/end-user-ids).\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    createImageVariation(image, n, size, responseFormat, user, options) {\n        return exports.OpenAIApiFp(this.configuration).createImageVariation(image, n, size, responseFormat, user, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Classifies if text violates OpenAI\\'s Content Policy\n     * @param {CreateModerationRequest} createModerationRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    createModeration(createModerationRequest, options) {\n        return exports.OpenAIApiFp(this.configuration).createModeration(createModerationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.\n     * @param {string} engineId The ID of the engine to use for this request.  You can select one of &#x60;ada&#x60;, &#x60;babbage&#x60;, &#x60;curie&#x60;, or &#x60;davinci&#x60;.\n     * @param {CreateSearchRequest} createSearchRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    createSearch(engineId, createSearchRequest, options) {\n        return exports.OpenAIApiFp(this.configuration).createSearch(engineId, createSearchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Delete a file.\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    deleteFile(fileId, options) {\n        return exports.OpenAIApiFp(this.configuration).deleteFile(fileId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Delete a fine-tuned model. You must have the Owner role in your organization.\n     * @param {string} model The model to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    deleteModel(model, options) {\n        return exports.OpenAIApiFp(this.configuration).deleteModel(model, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Returns the contents of the specified file\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    downloadFile(fileId, options) {\n        return exports.OpenAIApiFp(this.configuration).downloadFile(fileId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    listEngines(options) {\n        return exports.OpenAIApiFp(this.configuration).listEngines(options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Returns a list of files that belong to the user\\'s organization.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    listFiles(options) {\n        return exports.OpenAIApiFp(this.configuration).listFiles(options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Get fine-grained status updates for a fine-tune job.\n     * @param {string} fineTuneId The ID of the fine-tune job to get events for.\n     * @param {boolean} [stream] Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    listFineTuneEvents(fineTuneId, stream, options) {\n        return exports.OpenAIApiFp(this.configuration).listFineTuneEvents(fineTuneId, stream, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary List your organization\\'s fine-tuning jobs\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    listFineTunes(options) {\n        return exports.OpenAIApiFp(this.configuration).listFineTunes(options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Lists the currently available models, and provides basic information about each one such as the owner and availability.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    listModels(options) {\n        return exports.OpenAIApiFp(this.configuration).listModels(options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Retrieves a model instance, providing basic information about it such as the owner and availability.\n     * @param {string} engineId The ID of the engine to use for this request\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    retrieveEngine(engineId, options) {\n        return exports.OpenAIApiFp(this.configuration).retrieveEngine(engineId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Returns information about a specific file.\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    retrieveFile(fileId, options) {\n        return exports.OpenAIApiFp(this.configuration).retrieveFile(fileId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n     * @param {string} fineTuneId The ID of the fine-tune job\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    retrieveFineTune(fineTuneId, options) {\n        return exports.OpenAIApiFp(this.configuration).retrieveFineTune(fineTuneId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Retrieves a model instance, providing basic information about the model such as the owner and permissioning.\n     * @param {string} model The ID of the model to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    retrieveModel(model, options) {\n        return exports.OpenAIApiFp(this.configuration).retrieveModel(model, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.OpenAIApi = OpenAIApi;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}